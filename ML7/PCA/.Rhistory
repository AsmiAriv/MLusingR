runApp('C:/R/Coursera/CapstoneProject/Project/AsmiArivWordPredict')
runApp('C:/R/Coursera/CapstoneProject/Project/AsmiArivWordPredict')
runApp('C:/R/Coursera/CapstoneProject/Project/AsmiArivWordPredict')
runApp('C:/R/Coursera/CapstoneProject/Project/AsmiArivWordPredict')
runApp('C:/R/Coursera/CapstoneProject/Project/AsmiArivWordPredict')
runApp('C:/R/Coursera/CapstoneProject/Project/AsmiArivWordPredict')
runApp('C:/R/Coursera/CapstoneProject/Project/AsmiArivWordPredict')
runApp('C:/R/Coursera/CapstoneProject/Project/AsmiArivWordPredict')
runApp('C:/R/Coursera/CapstoneProject/Project/AsmiArivWordPredict')
runApp('C:/R/Coursera/CapstoneProject/Project/AsmiArivWordPredict')
runApp('C:/R/Coursera/CapstoneProject/Project/AsmiArivWordPredict')
runApp('C:/R/Coursera/CapstoneProject/Project/AsmiArivWordPredict')
q()
---
data(arbuthnot)
```{r load-abrbuthnot-data}
data(arbuthnot)
```
data(arbuthnot)
library(dplyr)
library(ggplot2)
library(statsr)
data(arbuthnot)
head(arbuthnot)
dim(arbuthnot)
# Chunk 1: load-packages
library(dplyr)
library(ggplot2)
library(statsr)
# Chunk 2: load-abrbuthnot-data
data(arbuthnot)
# Chunk 3: view-data
arbuthnot
# Chunk 4: dim-data
dim(arbuthnot)
# Chunk 5: names-data
names(arbuthnot)
# Chunk 6: view-boys
arbuthnot$boys
# Chunk 7: extract-counts-of-girls-born
# type your code for the Question 2 here, and Knit
# Chunk 8: plot-girls-vs-year
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point()
# Chunk 9: plot-help
?ggplot
# Chunk 10: calc-total-bapt-numbers
5218 + 4683
# Chunk 11: calc-total-bapt-vars
arbuthnot$boys + arbuthnot$girls
# Chunk 12: calc-total-bapt-vars-save
arbuthnot <- arbuthnot %>%
mutate(total = boys + girls)
# Chunk 13: plot-total-vs-year-line
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line()
# Chunk 14: plot-total-vs-year-line-and-point
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line() +
geom_point()
# Chunk 15: plot-proportion-of-boys-over-time
# type your code for the Exercise here, and Knit
# Chunk 16: boys-more-than-girls
arbuthnot <- arbuthnot %>%
mutate(more_boys = boys > girls)
# Chunk 17: load-present-data
data(present)
# Chunk 18: variables-in-present
# type your code for Question 4 here, and Knit
# Chunk 19: years-in-present-data
# type your code for Exercise here, and Knit
# Chunk 20: prop-boys-over-time
# type your code for Question 5 here, and Knit
# Chunk 21: more-boys-per-year
# type your code for Question 6 here, and Knit
# Chunk 22: prop-boy-girl-over-time
# type your code for Question 7 here, and Knit
# Chunk 23: most-total-births
# type your code for Question 8 here
# sample code is provided below, edit as necessary, uncomment, and then Knit
#present %>%
#  mutate(total = ?) %>%
#  arrange(desc(total))
View(arbuthnot)
names(arbuthnot)
View(arbuthnot)
View(arbuthnot)
arbuthnot$boys
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point()
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_line()
?ggplot
arbuthnot$boys + arbuthnot$girls
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line()
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line() +
geom_point()
ggplot(data = arbuthnot, aes(x = year, y = boys/total)) +
geom_line() +
geom_point()
data(present)
names(present)
range(present$year)
present <- present %>% mutate(total=boys+girls)
present <- present %>% mutate(prop_boys=boys/total)
ggplot(present, aes(x=year,y=prop_boys)) + geom_line() + geom_point()
present <- present %>% mutate(more_boys=boys>girls)
ggplot(present, aes(x=year, y=more_boys)) + geom_bar()
ggplot(present, aes(x=year, y=more_boys)) + geom_bar(stat="identity")
ggplot(present, aes(x=more_boys)) + geom_bar()
table(present%more_boys)
table(present$more_boys)
dim(present)
present <- present %>% mutate(prop_boy_girl=boys/girls)
ggplot(present, aes(x=year,y=prop_boy_girl)) + geom_line() + geom_point()
present %>% mutate(total = year) %>% arrange(desc(total))
present %>% mutate(total = total) %>% arrange(desc(total))
nycflights <- nycflights %>%
mutate(avg_speed = (60*distance)/air_time) %>% select(avg_speed, tailnum)
data(kobe_basket)
pbinom(4,10,0.6)
pbinom(300,600,0.45)
pbinom(301,600,0.45)
1-pbinom(300,600,0.45)
1-pbinom(301,600,0.45)
val <- c(53.8, 56.1, 54.5, 54.8, 55.2, 55.1, 54.7, 55.8, 55.9, 54.5)
m <- mean(val)
m
z <- (55-55.04)/0.3
z
pnorm(.4483, 55.04,0.3)
pnorm(0.4483, mean=55.04,sd=0.3)
pnorm(-0.13333, mean=55.04,sd=0.3)
pnorm(55, mean=55.04,sd=0.3)
t.test(55, mean=55.04,sd=0.3)
t.test(0.4469649)
t.test(55, mu=55.04,sd=0.3)
t.test(val, mu=55.04,sd=0.3)
t.test(val, alternative="less",mu=55.04,sd=0.3)
1-0.4469649
t.test(val, mu=55,sd=0.3)
pnorm(55.04, mean=55,sd=0.3)
(55.04-55)/0.3
1-pnorm(55.04, mean=55,sd=0.3)
val
sd(val)
actval-predict(m1, newdata=data.frame(at_bats=5579))
library(httpuv)
library(Rfacebook)
library(RColorBrewer)
library(RCurl)
library(rjson)
library(httr)
access_token <-
EAACEdEose0cBAGNcdyUGWlooHJMUgvrAXuIJd8u9Z
BpVZCQ9PZB8nULriCjucoeas0ZAxRLomIAMwJXM6Wo
oFdnSm8uWj9ZArvOp0erCZASVYaTYZCYuQVbANG5pb
CMrRpQSZBWZBJaQ4GzTSg55lxJRkQ4k5Ndydul9WB0
Xpoe0uZBRUi5ssWTPlK
access_token <- EAACEdEose0cBAGNcdyUGWlooHJMUgvrAXuIJd8u9ZBpVZCQ9PZB8nULriCjucoeas0ZAxRLomIAMwJXM6WooFdnSm8uWj9ZArvOp0erCZASVYaTYZCYuQVbANG5pbCMrRpQSZBWZBJaQ4GzTSg55lxJRkQ4k5Ndydul9WB0Xpoe0uZBRUi5ssWTPlK
access_token <- "EAACEdEose0cBAGNcdyUGWlooHJMUgvrAXuIJd8u9ZBpVZCQ9PZB8nULriCjucoeas0ZAxRLomIAMwJXM6WooFdnSm8uWj9ZArvOp0erCZASVYaTYZCYuQVbANG5pbCMrRpQSZBWZBJaQ4GzTSg55lxJRkQ4k5Ndydul9WB0Xpoe0uZBRUi5ssWTPlK"
options(Rcurloptions=list(verbose=FALSE,capath=system.file("CurlSSL","cacert.pem",package="RCurl"), ssl.verifypeer=FALSE))
me <- getUsers("me",token=access_token)
str(me)
me
myFriends <- getFriends(access_token,simplify=FALSE)
myFriends
?glm
q()
setwd("C:/R/MachineLearning/ML7/Kmeans")
#loading computeCentroids.R
source('computeCentroids.R')
#loading computeCentroids.R
source('findClosestCentroids.R')
library(R.matlab) #Required for reading .mat file
# Load an example dataset that we will be using
data <- readMat('ex7data2.mat') # training data stored in arrays X, y
X <- data[[1]]
?title
palette = hsv(3 + 1)
palette = rgb(3 + 1)
rnorm(3)
abs(rnorm(3))
abs(runif(3))
abs(runif(0,1,3))
abs(runif(4,3))
abs(runif(3,4))
abs(runif(3,1:4))
abs(runif(1:4,3))
?runif
abs(runif(3,1,4))
abs(runif(3,0,1))
runif(3,1,4)
K = 3
mat <- matrix(runif(K,0,1),K)
mat
mat <- matrix(rep(runif(K,0,1),3),K)
mat
palette = rgb(mat)
palette
plot(1,2,col=palette[1])
plot(1,2,col=palette[2])
plot(1,2,col=palette[3])
hsv(mat)
plot(1:9,1:9,col=hsv(mat))
plot(1:9,1:9,col=hsv(runif(K,0,1)))
rainbow(k)
rainbow(K)
#loading plotDataPoints.R
source('plotDataPoints.R')
#loading plotProgresskMeans.R
source('plotProgresskMeans.R')
#loading runkMeans.R
source('runkMeans.R')
K = 3
max_iters = 10
initial_centroids = matrix(c(3, 3, 6, 2, 8, 5),3, byrow = T)
km <- runkMeans(X, initial_centroids, max_iters, TRUE)
?par
par(mfrow=c(5,5))
km <- runkMeans(X, initial_centroids, max_iters, TRUE)
km <- runkMeans(X, initial_centroids, max_iters, TRUE)
km <- runkMeans(X, initial_centroids, max_iters, TRUE)
?plot
#loading plotDataPoints.R
source('plotDataPoints.R')
#loading plotProgresskMeans.R
source('plotProgresskMeans.R')
#loading runkMeans.R
source('runkMeans.R')
km <- runkMeans(X, initial_centroids, max_iters, TRUE)
lines
?lines
#loading plotDataPoints.R
source('plotDataPoints.R')
#loading plotProgresskMeans.R
source('plotProgresskMeans.R')
#loading drawLine.R
source('drawLine.R')
#loading runkMeans.R
source('runkMeans.R')
km <- runkMeans(X, initial_centroids, max_iters, TRUE)
source('plotDataPoints.R')
km <- runkMeans(X, initial_centroids, max_iters, TRUE)
source('plotDataPoints.R')
km <- runkMeans(X, initial_centroids, max_iters, TRUE)
source('plotDataPoints.R')
#loading plotProgresskMeans.R
source('plotProgresskMeans.R')
km <- runkMeans(X, initial_centroids, max_iters, TRUE)
source('runkMeans.R')
km <- runkMeans(X, initial_centroids, max_iters, TRUE)
source('runkMeans.R')
km <- runkMeans(X, initial_centroids, max_iters, TRUE)
?imread
?readPNG
library(png)
?readPNG
A <- readPNG(system.file("img", "bird_small.png", package="png"))
A <- readPNG(system.file("img", "bird_small.png", package="png"))
A <- readPNG("bird_small.png")
class(A)
dim(A)
A = A / 255; # Divide by 255 so that all values are in the range 0 - 1
img_size = dim(A)
img_size
img_size[1]
img_size[2]
img_size[3]
dim(A) <- dim(img_size[1]*img_size[2], 3)
dim(A) <- c(img_size[1]*img_size[2], 3)
dim(A)
A <- readPNG("bird_small.png")
A = A / 255; # Divide by 255 so that all values are in the range 0 - 1
#Dimension of the image
img_size = dim(A)
# Reshape the image into an Nx3 matrix where N = number of pixels.
# Each row will contain the Red, Green and Blue pixel values
# This gives us our dataset matrix X that we will use K-Means on.
X = A
dim(X) <- c(img_size[1]*img_size[2], 3)
dim(A)
dim(X)
K = 16
max_iters = 10
initial_centroids = kMeansInitCentroids(X, K)
source('kMeansInitCentroids.R')
initial_centroids = kMeansInitCentroids(X, K)
km = runkMeans(X, initial_centroids, max_iters)
idx = findClosestCentroids(X, centroids)
centroids = km$centroids
idx = findClosestCentroids(X, centroids)
X_recovered = centroids[idx,]
dim(X_recovered) = c(img_size[1], img_size[2], 3)
par(mfrow=c(1, 2))
image(A)
title(main = 'Original')
image(X)
rasterImage(A)
?rasterImage
plot(c(100, 250), c(300, 450), type = "n", xlab = "", ylab = "")
plot(c(100, 250), c(300, 450), type = "n", xlab = "", ylab = "")
rasterImage(A, 100, 300, 150, 350, interpolate = FALSE)
plot(c(100, 250), c(300, 450), type = "n", xlab = "", ylab = "")
rasterImage(A, 100, interpolate = FALSE)
rasterImage(A, 100, 450,interpolate = FALSE)
rasterImage(A, 100, 300, 450, 350, interpolate = FALSE)
plot(c(100, 250), c(300, 450), type = "n", xlab = "", ylab = "")
rasterImage(A, 100, 300, 450, 450, interpolate = FALSE)
plot(c(100, 250), c(300, 450), type = "n", xlab = "", ylab = "")
rasterImage(A, 100, 300, 250, 450, interpolate = FALSE)
plot(c(100, 250), c(300, 450), type = "n", xlab = "", ylab = "")
rasterImage(X, 100, 300, 250, 450, interpolate = FALSE)
plot(c(100, 250), c(300, 450), type = "n", xlab = "", ylab = "")
rasterImage(X, 100, 300, 250, 450, interpolate = T)
Aras <- as.raster(A)
plot(c(100, 250), c(300, 450), type = "n", xlab = "", ylab = "")
rasterImage(Aras, 100, 300, 250, 450, interpolate = T)
Aras <- as.raster(X)
plot(c(100, 250), c(300, 450), type = "n", xlab = "", ylab = "")
rasterImage(Aras, 100, 300, 250, 450, interpolate = T)
rasterImage(Aras, 100, 300, 250, 450, interpolate = F)
plot(c(100, 250), c(300, 450), type = "n", xlab = "", ylab = "")
rasterImage(Aras, 100, 300, 250, 450, interpolate = F)
image(X)
?image
image(X, col=terrain.colors(255))
image(X, col=terrain.colors(16000))
image(X, col=heat.colors(16000))
image(X, col=topo.colors(16000))
plot(0, type='n', xlim=0:1, ylim=0:1,
+      main="Not the best use, but this gives the idea")
plot(0, type='n', xlim=0:1, ylim=0:1,
main="Not the best use, but this gives the idea")
rasterImage(A, -0.5, -0.3, 1.5, 1.3)
class(A)
a
A[1,1,1]
A[1,1,2]
A[1,1,3]
A[3,4,3]
dim(A)
plot(0, type='n', xlim=0:1, ylim=0:1,
main="Not the best use, but this gives the idea")
rasterImage(X_recovered, -0.5, -0.3, 1.5, 1.3)
A1 <- readPNG("bird_small.png",native = TRUE)
rasterImage(A1)
plot(0, type='n', xlim=0:1, ylim=0:1,
main="Not the best use, but this gives the idea")
rasterImage(A1, -0.5, -0.3, 1.5, 1.3)
class(A1)
class(Aras)
?as.raster
plot(0, type='n', xlim=0:1, ylim=0:1,
main="Not the best use, but this gives the idea")
rasterImage(as.raster(A), -0.5, -0.3, 1.5, 1.3)
plot(0, type='n', xlim=0:1, ylim=0:1,
main="Not the best use, but this gives the idea")
rasterImage(as.raster(X_recovered), -0.5, -0.3, 1.5, 1.3)
A1
length(A1)
length(as.raster(A))
as.raster(A)
A
A <- readPNG("bird_small.png")
as.raster(A)
plot(0, type='n', xlim=0:1, ylim=0:1,
main="Not the best use, but this gives the idea")
rasterImage(as.raster(A), -0.5, -0.3, 1.5, 1.3)
dim(A)
img_size = dim(A)
# Reshape the image into an Nx3 matrix where N = number of pixels.
# Each row will contain the Red, Green and Blue pixel values
# This gives us our dataset matrix X that we will use K-Means on.
X = A
dim(X) <- c(img_size[1]*img_size[2], 3)
K = 16
max_iters = 10
# When using K-Means, it is important to initialize the centroids randomly.
# We will kMeansInitCentroids.m for random initialization of centroids
initial_centroids = kMeansInitCentroids(X, K)
# Run K-Means
km = runkMeans(X, initial_centroids, max_iters)
centroids = km$centroids
idx = findClosestCentroids(X, centroids)
X_recovered = centroids[idx,]
# Reshape the recovered image into proper dimensions
dim(X_recovered) = c(img_size[1], img_size[2], 3)
plot(0, type='n', xlim=0:1, ylim=0:1, main = "Original vs compressed")
rasterImage(as.raster(X_recovered), -0.5, -0.3, 1.5, 1.3)
par(mfrow=c(1, 2))
plot(0, type='n', xlim=0:1, ylim=0:1, main = "Original vs compressed")
rasterImage(as.raster(A), -0.5, -0.3, 1.5, 1.3)
title(main = 'Original')
plot(0, type='n', xlim=0:1, ylim=0:1, main = "Original vs compressed")
rasterImage(as.raster(X_recovered), -0.5, -0.3, 1.5, 1.3)
par(mfrow=c(1, 2))
plot(0, type='n', xlim=0:1, ylim=0:1, main = "Original")
rasterImage(as.raster(A), 0, 0, 1, 1)
# Display the Compressed image
plot(0, type='n', xlim=0:1, ylim=0:1, main = paste0("Compressed with ",K," colors"))
rasterImage(as.raster(X_recovered), 0, 0, 1, 1)
dim(A)
length(idx)
dim(centroids)
(centroids)
dim(X)
dim(A)
dim(X_recovered)
rm(list=ls())
setwd("C:/R/MachineLearning/ML7/PCA")
mat <- matrix(1:4,2)
mat
sig <- svd(mat)
names(sig)
sig$d
sig$u
l <- matrix(c(0,0,0,0),2)
l
diag(l) <- sig$d
l
setwd("C:/R/MachineLearning/ML7/PCA")
#Initializing
rm(list=ls()) #U
source('pca.R')
source('displayData.R')
library(R.matlab)
data <- readMat('ex7data1.mat')
length(data)
?plot
X <- data[[1]]
plot(X[, 1], X[, 2], col='blue', pch=1)
plot(X[, 1], X[, 2], col='blue', pch=1,
axis=c(0.5, 6.5, 2, 8))
plot(X[, 1], X[, 2], col='blue', pch=1,
xlim=c(0.5, 6.5), ylim=c(2, 8))
warnings()
plot(X[, 1], X[, 2], col='blue', pch=1,
xlim=c(0.5, 6.5), ylim=c(2, 8))
source('featureNormalize.R')
fn <- featureNormalize(X)
X_norm <- fn$X
mu <- fn$mu
sigma <- fn$sigma
pc <- pca(X_norm)
source('pca.R')
pc <- pca(X_norm)
source('drawLine.R')
drawLine(mu, mu + 1.5 * S[1,1] %*% t(U[,1]), col='black', lwd=2)
drawLine(mu, mu + 1.5 * S[2,2] %*% t(U[,2]), col='black', lwd=2)
U <- pc$U
S <- pc$S
drawLine(mu, mu + 1.5 * S[1,1] %*% t(U[,1]), col='black', lwd=2)
drawLine(mu, mu + 1.5 * S[2,2] %*% t(U[,2]), col='black', lwd=2)
cat('Top eigenvector: \n')
cat(U[1,1], U[2,1])
cat('\n(you should expect to see -0.707107 -0.707107)\n')
source('projectData.R')
source('displayData.R')
plot(X_norm[, 1], X_norm[, 2], col='blue', pch=1,
xlim=c(-4, 3), ylim=c(-4, 3))
K = 1
Z = projectData(X_norm, U, K)
cat('Projection of the first example: \n', Z[1]);
cat('\n(this value should be about 1.481274)\n\n')
source('recoverData.R')
X_rec  = recoverData(Z, U, K)
cat('Approximation of the first example:', X_rec[1, 1], X_rec[1, 2])
cat('\n(this value should be about  -1.047419 -1.047419)\n\n')
points(X_rec[, 1], X_rec[, 2], col='red', pch=1,
xlim=c(-4, 3), ylim=c(-4, 3))
for(i in 1:nrow(X_norm)){
drawLine(X_norm[i, ], X_rec[i, ], col='black', lwd=1,lty=2)
}
data <- readMat('ex7faces.mat')
length(data)
class(data)
displayData(X[1:100, ])
dim(X)
displayData(X)
data
X
X <- data[[1]]
dim(X)
displayData(X[1:100, ])
fn <- featureNormalize(X)
X_norm <- fn$X
mu <- fn$mu
sigma <- fn$sigma
pc <- pca(X_norm)
U <- pc$U
S <- pc$S
displayData(t(U[, 1:36]))
K = 100
Z = projectData(X_norm, U, K)
cat('The projected data Z has a size of: ')
dim(Z)
K = 100
X_rec  = recoverData(Z, U, K)
par(mfrow=c(1, 2))
displayData(X_norm[1:100,])
title('Original vs Recovered faces')
# Display reconstructed data from only k eigenfaces
displayData(X_rec[1:100,])
par(mfrow=c(1, 2))
displayData(X_norm[1:100,])
title('Original faces')
# Display reconstructed data from only k eigenfaces
displayData(X_rec[1:100,])
title('Recovered faces')
